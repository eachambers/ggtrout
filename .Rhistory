library(ggplot2)
remove.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
library(ggplot2)
RStudio.Version()
cite(ggplot2)
library(ggplot2)
cite(ggplot2)
cite("ggplot2")
citation("ggplot2")
citation("dplyr")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
updateR()
library(devtools)
updateR()
githubinstall("ggtree")
install_github("YuLab-SMU/ggtree")
install.packages("ggtree")
githubinstall("ggtree")
library(devtools)
githubinstall("ggtree")
install_github(YuLab-SMU/ggtree)
install_github("YuLab-SMU/ggtree")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("treeio")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
updateR()
install.packages("installR")
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR()
updateR("rab1dxxx")
rab1dxxx
install.packages(as.vector(needed_packages))
read.nexus
read.nexus)
read.nexus()
devtools::install_github("AnushaPB/wingen",
auth_token = "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",
build_vignettes = TRUE)
library(devtools)
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
install.packages("devtools")
library(devtools)
devtools::install_github("AnushaPB/wingen",
auth_token = "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",
build_vignettes = TRUE)
install.packages("terra")
library(terra)
install.packages("rgdal")
library(rgdal)
install.packages("terra")
library(terra)
devtools::install_github("AnushaPB/wingen",
auth_token = "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",
build_vignettes = TRUE)
devtools::install_github("AnushaPB/wingen",
auth_token = "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",
build_vignettes = TRUE)
library(wingen)
library(raster)
library(vcfR)
library(viridis)
library(foreach)
library(doParallel)
load_middle_earth_ex()
View(lotr_vcf)
force(lotr_coords)
View(lotr_coords)
force(lotr_lyr)
View(lotr_lyr)
# Genetic data
lotr_vcf
# Coordinates
head(lotr_coords)
# Raster data
lotr_lyr
# Map of data
plot(lotr_lyr, col = magma(100), axes = FALSE, box = FALSE)
points(lotr_coords, col = mako(1, begin = 0.8), pch = 3, cex = 0.5)
ex_raster1 <- coords_to_raster(lotr_coords, buffer = 1, plot = TRUE)
ex_raster2 <- coords_to_raster(lotr_coords, buffer = 1, agg = 2, plot = TRUE)
ex_raster3 <- coords_to_raster(lotr_coords, buffer = 1, disagg = 4, plot = TRUE)
ex_raster4 <- coords_to_raster(lotr_coords, buffer = 1, res = 10, plot = TRUE)
library(devtools)
devtools::install_github("AnushaPB/wingen", build_vignettes = TRUE)
#' This column can contain info like the name of the gene, etc. This function retrieves attributes from
#' this column of a gff file
#' @references https://support.bioconductor.org/p/24657/
#' @param x attributes
#' @param field specific field you want to extract (e.g., "Name", "Parent", etc.)
#' @param attrsep how attributes are separated
#'
#' @family gff processing
#'
#' @return
getAttributeField <- function (x, field, attrsep = ";") {
s = strsplit(x, split = attrsep, fixed = TRUE)
sapply(s, function(atts) {
a = strsplit(atts, split = "=", fixed = TRUE)
m = match(field, sapply(a, "[", 1))
if (!is.na(m)) {
rv = a[[m]][2]
}
else {
rv = as.character(NA)
}
return(rv)
})
}
#' Parse gff file
#'
#' @param gffFile
#' @param nrows
#'
#' @family gff processing
#'
#' @return
gffRead <- function(gffFile, nrows = -1) {
cat("Reading ", gffFile, ": ", sep="")
# Define characteristics of gff columns
gff = read.table(gffFile, sep="\t", as.is=TRUE, quote="",
header=FALSE, comment.char="#", nrows = nrows,
colClasses=c("character", "character", "character", "integer", "integer",
"character", "character", "character", "character"))
# Define column names for gff file
colnames(gff) = c("seqname", "source", "feature", "start", "end",
"score", "strand", "frame", "attributes")
cat("found", nrow(gff), "rows with classes:",
paste(sapply(gff, class), collapse=", "), "\n")
return(gff)
}
library(here)
library(tidyverse)
library(cowplot)
library(fuzzyjoin)
here()
install_github("Andrew-Shirk/sGD")
library(devtools)
install_github("Andrew-Shirk/sGD")
library(maptools)
library(raster)
install.packages("maptools")
library(maptools)
library(devtools)
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::install("AnushaPB/wingen")
renv::restore()
library(devtools)
devtools::install("AnushaPB/wingen")
library(cowplot)
citation("cowplot")
library(here)
library(here)
library(rgdal)
library(here)
library(terra)
library(viridis)
library(tidyverse)
library(wingen)
library(tigris)
library(sf)
library(rgbif)
library(PNWColors)
devtools::install_github("AnushaPB/wingen")
library(wingen)
library(wingen)
vignette(wingen)
vignette("wingen")
browseVignettes("wingen")
vignette(all = FALSE)
devtools::install_github("AnushaPB/wingen")
library(wingen)
browseVignettes(wingen)
browseVignettes("AnushaPB/wingen")
browseVignettes("wingen")
vignette(all = FALSE)
?vignette
vignette(package = wingen)
vignette(package = "wingen")
library(wingen)
devtools::install_github("AnushaPB/wingen", build_vignettes = TRUE)
vignette(wingen)
vignette("wingen")
browseVignettes("wingen")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(wingen)
library(terra)
library(raster)
library(viridis)
library(sf)
library(SpatialKDE)
load_middle_earth_ex()
# Genetic data
lotr_vcf
# Coordinates
head(lotr_coords)
# Raster data
lotr_lyr
# Map of data
plot(lotr_lyr, col = magma(100), axes = FALSE, box = FALSE)
points(lotr_coords, col = mako(1, begin = 0.8), pch = 3, cex = 0.5)
ex_raster1 <- coords_to_raster(lotr_coords, buffer = 1, plot = TRUE)
ex_raster2 <- coords_to_raster(lotr_coords, buffer = 1, agg = 2, plot = TRUE)
ex_raster3 <- coords_to_raster(lotr_coords, buffer = 1, disagg = 4, plot = TRUE)
ex_raster4 <- coords_to_raster(lotr_coords, buffer = 1, res = 10, plot = TRUE)
## Example raster:
lyr_longlat <- rast(ncols = 40, nrows = 40, xmin = -110, xmax = -90, ymin = 40, ymax = 60,
crs = "+proj=longlat +datum=WGS84")
## Example coordinates:
coords_df <- data.frame(x = c(-110, -90), y = c(40, 60))
coords_longlat <- st_as_sf(coords_df, coords = c("x", "y"), crs = "+proj=longlat")
# Next, the coordinates and raster can be projected to an equal area projection, in this case the Goode Homolosine projection (https://proj.org/operations/projections/goode.html):
coords_eq <- st_transform(coords_longlat, crs = "+proj=goode")
lyr_eq <- project(lyr_longlat, "+proj=goode")
preview_gd(lotr_lyr,
lotr_coords,
wdim = 7,
fact = 3,
sample_count = TRUE,
min_n = 2
)
wgd <- window_gd(lotr_vcf,
lotr_coords,
lotr_lyr,
stat = "pi",
wdim = 7,
fact = 3,
rarify = TRUE,
rarify_n = 2,
rarify_nit = 5,
L = 100
)
par(pty = "s")
# The plot_gd function plots the genetic diversity layer
plot_gd(wgd, main = "Moving window pi")
# The plot_count function plots the sample count layer
plot_count(wgd, main = "Moving window sample counts")
# Note: this step can take a little while
# index = 1 kriges the first layer in wgd (the genetic diversity layer)
kgd <- krig_gd(wgd, index = 1, lotr_lyr, disagg_grd = 2)
plot_gd(kgd, main = "Kriged pi")
kgd_autoKrige <- krig_gd(wgd, index = 1, lotr_lyr, disagg_grd = 2, autoKrige_output = TRUE)
# disaggregate lotr_lyr to make it the same resolution as kgd before masking
## note: lotr_lyr is a RasterLayer which we convert to a SpatRaster with rast()
mask_lyr <- disagg(rast(lotr_lyr), 2)
mgd <- mask_gd(kgd, mask_lyr, minval = 0.01)
plot_gd(mgd, main = "Kriged & carrying capacity masked pi")
mgd <- mask_gd(kgd, lotr_range)
plot_gd(mgd, main = "Kriged & range masked pi")
library(devtools)
devtools::install_github("AnushaPB/wingen")
setwd("~/Documents/GitHub/ggtrout")
create_package("~/Documents/GitHub/ggtrout")
library(usethis)
create_package("~/Documents/GitHub/ggtrout")
